// Generated by rstantools.  Do not edit by hand.

/*
    saeHB.TF.beta is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    saeHB.TF.beta is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with saeHB.TF.beta.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_saeHB_TF_beta_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 60> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 21, column 2 to column 14)",
  " (in 'string', line 22, column 2 to column 14)",
  " (in 'string', line 23, column 2 to column 17)",
  " (in 'string', line 24, column 2 to column 25)",
  " (in 'string', line 25, column 2 to column 22)",
  " (in 'string', line 26, column 2 to column 22)",
  " (in 'string', line 27, column 2 to column 25)",
  " (in 'string', line 28, column 2 to column 25)",
  " (in 'string', line 31, column 2 to column 15)",
  " (in 'string', line 32, column 2 to column 23)",
  " (in 'string', line 33, column 2 to column 23)",
  " (in 'string', line 35, column 4 to column 81)",
  " (in 'string', line 36, column 4 to column 26)",
  " (in 'string', line 37, column 4 to column 32)",
  " (in 'string', line 34, column 17 to line 38, column 3)",
  " (in 'string', line 34, column 2 to line 38, column 3)",
  " (in 'string', line 42, column 2 to column 32)",
  " (in 'string', line 43, column 2 to column 32)",
  " (in 'string', line 44, column 2 to column 28)",
  " (in 'string', line 45, column 2 to column 32)",
  " (in 'string', line 46, column 2 to column 32)",
  " (in 'string', line 49, column 4 to column 46)",
  " (in 'string', line 48, column 20 to line 50, column 3)",
  " (in 'string', line 48, column 2 to line 50, column 3)",
  " (in 'string', line 51, column 2 to column 39)",
  " (in 'string', line 52, column 2 to column 39)",
  " (in 'string', line 55, column 4 to column 28)",
  " (in 'string', line 54, column 16 to line 56, column 3)",
  " (in 'string', line 54, column 2 to line 56, column 3)",
  " (in 'string', line 2, column 2 to column 17)",
  " (in 'string', line 3, column 2 to column 20)",
  " (in 'string', line 4, column 2 to column 22)",
  " (in 'string', line 5, column 2 to column 17)",
  " (in 'string', line 6, column 9 to column 10)",
  " (in 'string', line 6, column 2 to column 14)",
  " (in 'string', line 7, column 9 to column 10)",
  " (in 'string', line 7, column 12 to column 18)",
  " (in 'string', line 7, column 2 to column 22)",
  " (in 'string', line 8, column 8 to column 9)",
  " (in 'string', line 8, column 2 to column 40)",
  " (in 'string', line 9, column 9 to column 13)",
  " (in 'string', line 9, column 2 to column 20)",
  " (in 'string', line 10, column 18 to column 22)",
  " (in 'string', line 10, column 2 to column 33)",
  " (in 'string', line 11, column 2 to column 23)",
  " (in 'string', line 12, column 2 to column 23)",
  " (in 'string', line 13, column 2 to column 23)",
  " (in 'string', line 14, column 2 to column 23)",
  " (in 'string', line 15, column 2 to column 23)",
  " (in 'string', line 16, column 2 to column 23)",
  " (in 'string', line 17, column 2 to column 23)",
  " (in 'string', line 18, column 2 to column 23)",
  " (in 'string', line 21, column 9 to column 10)",
  " (in 'string', line 22, column 9 to column 10)",
  " (in 'string', line 23, column 9 to column 13)",
  " (in 'string', line 24, column 18 to column 19)",
  " (in 'string', line 31, column 9 to column 10)",
  " (in 'string', line 32, column 18 to column 19)",
  " (in 'string', line 33, column 18 to column 19)"};
#include <stan_meta_header.hpp>
class model_saeHB_TF_beta final : public model_base_crtp<model_saeHB_TF_beta> {
private:
  int n;
  int nvar;
  int auxvar;
  int m;
  Eigen::Matrix<double,-1,1> y_data__;
  Eigen::Matrix<double,-1,-1> x_data__;
  std::vector<int> state2;
  Eigen::Matrix<double,-1,1> mu_b_data__;
  Eigen::Matrix<double,-1,1> sigma2_b_data__;
  double tau_ua;
  double tau_ub;
  double tau_va;
  double tau_vb;
  double phi_aa;
  double phi_ab;
  double phi_ba;
  double phi_bb;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> mu_b{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma2_b{nullptr, 0};
public:
  ~model_saeHB_TF_beta() {}
  model_saeHB_TF_beta(stan::io::var_context& context__, unsigned int
                      random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_saeHB_TF_beta_namespace::model_saeHB_TF_beta";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 30;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 30;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 31;
      context__.validate_dims("data initialization", "nvar", "int",
        std::vector<size_t>{});
      nvar = std::numeric_limits<int>::min();
      current_statement__ = 31;
      nvar = context__.vals_i("nvar")[(1 - 1)];
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "nvar", nvar, 1);
      current_statement__ = 32;
      context__.validate_dims("data initialization", "auxvar", "int",
        std::vector<size_t>{});
      auxvar = std::numeric_limits<int>::min();
      current_statement__ = 32;
      auxvar = context__.vals_i("auxvar")[(1 - 1)];
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "auxvar", auxvar, 1);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "m", "int",
        std::vector<size_t>{});
      m = std::numeric_limits<int>::min();
      current_statement__ = 33;
      m = context__.vals_i("m")[(1 - 1)];
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "m", m, 1);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("y", "n", n);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), n);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 35;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 35;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 35;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 36;
      stan::math::validate_non_negative_index("x", "n", n);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("x", "auxvar", auxvar);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(n),
          static_cast<size_t>(auxvar)});
      x_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, auxvar,
                   std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_data__.data(), n,
        auxvar);
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 38;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= auxvar; ++sym1__) {
          current_statement__ = 38;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 38;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 38;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 39;
      stan::math::validate_non_negative_index("state2", "n", n);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "state2", "int",
        std::vector<size_t>{static_cast<size_t>(n)});
      state2 = std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 40;
      state2 = context__.vals_i("state2");
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "state2", state2, 1);
      current_statement__ = 40;
      stan::math::check_less_or_equal(function__, "state2", state2, m);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("mu_b", "nvar", nvar);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "mu_b", "double",
        std::vector<size_t>{static_cast<size_t>(nvar)});
      mu_b_data__ = Eigen::Matrix<double,-1,1>::Constant(nvar,
                      std::numeric_limits<double>::quiet_NaN());
      new (&mu_b) Eigen::Map<Eigen::Matrix<double,-1,1>>(mu_b_data__.data(),
        nvar);
      {
        std::vector<local_scalar_t__> mu_b_flat__;
        current_statement__ = 42;
        mu_b_flat__ = context__.vals_r("mu_b");
        current_statement__ = 42;
        pos__ = 1;
        current_statement__ = 42;
        for (int sym1__ = 1; sym1__ <= nvar; ++sym1__) {
          current_statement__ = 42;
          stan::model::assign(mu_b, mu_b_flat__[(pos__ - 1)],
            "assigning variable mu_b", stan::model::index_uni(sym1__));
          current_statement__ = 42;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 43;
      stan::math::validate_non_negative_index("sigma2_b", "nvar", nvar);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "sigma2_b", "double",
        std::vector<size_t>{static_cast<size_t>(nvar)});
      sigma2_b_data__ = Eigen::Matrix<double,-1,1>::Constant(nvar,
                          std::numeric_limits<double>::quiet_NaN());
      new (&sigma2_b)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma2_b_data__.data(), nvar);
      {
        std::vector<local_scalar_t__> sigma2_b_flat__;
        current_statement__ = 44;
        sigma2_b_flat__ = context__.vals_r("sigma2_b");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= nvar; ++sym1__) {
          current_statement__ = 44;
          stan::model::assign(sigma2_b, sigma2_b_flat__[(pos__ - 1)],
            "assigning variable sigma2_b", stan::model::index_uni(sym1__));
          current_statement__ = 44;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "sigma2_b", sigma2_b, 0);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "tau_ua", "double",
        std::vector<size_t>{});
      tau_ua = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 45;
      tau_ua = context__.vals_r("tau_ua")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "tau_ua", tau_ua, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "tau_ub", "double",
        std::vector<size_t>{});
      tau_ub = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 46;
      tau_ub = context__.vals_r("tau_ub")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "tau_ub", tau_ub, 0);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "tau_va", "double",
        std::vector<size_t>{});
      tau_va = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 47;
      tau_va = context__.vals_r("tau_va")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "tau_va", tau_va, 0);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "tau_vb", "double",
        std::vector<size_t>{});
      tau_vb = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 48;
      tau_vb = context__.vals_r("tau_vb")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "tau_vb", tau_vb, 0);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "phi_aa", "double",
        std::vector<size_t>{});
      phi_aa = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 49;
      phi_aa = context__.vals_r("phi_aa")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "phi_aa", phi_aa, 0);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "phi_ab", "double",
        std::vector<size_t>{});
      phi_ab = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 50;
      phi_ab = context__.vals_r("phi_ab")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "phi_ab", phi_ab, 0);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "phi_ba", "double",
        std::vector<size_t>{});
      phi_ba = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 51;
      phi_ba = context__.vals_r("phi_ba")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "phi_ba", phi_ba, 0);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "phi_bb", "double",
        std::vector<size_t>{});
      phi_bb = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 52;
      phi_bb = context__.vals_r("phi_bb")[(1 - 1)];
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "phi_bb", phi_bb, 0);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("u", "n", n);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("f", "m", m);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("b", "nvar", nvar);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("phi", "n", n);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("mu", "n", n);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("A", "n", n);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("B", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n + m + nvar + n + 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_saeHB_TF_beta";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_saeHB_TF_beta_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> u =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 1;
      u = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n);
      Eigen::Matrix<local_scalar_t__,-1,1> f =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m, DUMMY_VAR__);
      current_statement__ = 2;
      f = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(m);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nvar, DUMMY_VAR__);
      current_statement__ = 3;
      b = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nvar);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 4;
      phi = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, n);
      local_scalar_t__ phi_a = DUMMY_VAR__;
      current_statement__ = 5;
      phi_a = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ phi_b = DUMMY_VAR__;
      current_statement__ = 6;
      phi_b = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ sigma2_u = DUMMY_VAR__;
      current_statement__ = 7;
      sigma2_u = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      local_scalar_t__ sigma2_v = DUMMY_VAR__;
      current_statement__ = 8;
      sigma2_v = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> A =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> B =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 16;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 12;
        stan::model::assign(mu,
          stan::math::inv_logit(
            (((stan::model::rvalue(b, "b", stan::model::index_uni(1)) +
            stan::math::dot_product(
              stan::model::rvalue(b, "b", stan::model::index_min_max(2, nvar)),
              stan::model::rvalue(x, "x", stan::model::index_uni(i)))) +
            stan::model::rvalue(f, "f",
              stan::model::index_uni(
                stan::model::rvalue(state2, "state2",
                  stan::model::index_uni(i))))) +
            stan::model::rvalue(u, "u", stan::model::index_uni(i)))),
          "assigning variable mu", stan::model::index_uni(i));
        current_statement__ = 13;
        stan::model::assign(A,
          (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
          stan::model::rvalue(phi, "phi", stan::model::index_uni(i))),
          "assigning variable A", stan::model::index_uni(i));
        current_statement__ = 14;
        stan::model::assign(B, ((1 -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) *
          stan::model::rvalue(phi, "phi", stan::model::index_uni(i))),
          "assigning variable B", stan::model::index_uni(i));
      }
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "A", A, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "B", B, 0);
      {
        current_statement__ = 17;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(f, 0,
                         stan::math::sqrt(sigma2_v)));
        current_statement__ = 18;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(u, 0,
                         stan::math::sqrt(sigma2_u)));
        current_statement__ = 19;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(phi, phi_a, phi_b));
        current_statement__ = 20;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(phi_a, phi_aa, phi_ab));
        current_statement__ = 21;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(phi_b, phi_ba, phi_bb));
        current_statement__ = 24;
        for (int k = 1; k <= nvar; ++k) {
          current_statement__ = 22;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(b, "b",
                             stan::model::index_uni(k)),
                           stan::model::rvalue(mu_b, "mu_b",
                             stan::model::index_uni(k)),
                           stan::math::sqrt(
                             stan::model::rvalue(sigma2_b, "sigma2_b",
                               stan::model::index_uni(k)))));
        }
        current_statement__ = 25;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(sigma2_u, tau_ua,
                         tau_ub));
        current_statement__ = 26;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(sigma2_v, tau_va,
                         tau_vb));
        current_statement__ = 29;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 27;
          lp_accum__.add(stan::math::beta_lpdf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(A, "A",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(B, "B",
                             stan::model::index_uni(i))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_saeHB_TF_beta_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> u =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      u = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n);
      Eigen::Matrix<double,-1,1> f =
        Eigen::Matrix<double,-1,1>::Constant(m,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      f = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(m);
      Eigen::Matrix<double,-1,1> b =
        Eigen::Matrix<double,-1,1>::Constant(nvar,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      b = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nvar);
      Eigen::Matrix<double,-1,1> phi =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      phi = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, n);
      double phi_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      phi_a = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double phi_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      phi_b = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double sigma2_u = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sigma2_u = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      double sigma2_v = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      sigma2_v = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> A =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> B =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(u);
      out__.write(f);
      out__.write(b);
      out__.write(phi);
      out__.write(phi_a);
      out__.write(phi_b);
      out__.write(sigma2_u);
      out__.write(sigma2_v);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 16;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 12;
        stan::model::assign(mu,
          stan::math::inv_logit(
            (((stan::model::rvalue(b, "b", stan::model::index_uni(1)) +
            stan::math::dot_product(
              stan::model::rvalue(b, "b", stan::model::index_min_max(2, nvar)),
              stan::model::rvalue(x, "x", stan::model::index_uni(i)))) +
            stan::model::rvalue(f, "f",
              stan::model::index_uni(
                stan::model::rvalue(state2, "state2",
                  stan::model::index_uni(i))))) +
            stan::model::rvalue(u, "u", stan::model::index_uni(i)))),
          "assigning variable mu", stan::model::index_uni(i));
        current_statement__ = 13;
        stan::model::assign(A,
          (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
          stan::model::rvalue(phi, "phi", stan::model::index_uni(i))),
          "assigning variable A", stan::model::index_uni(i));
        current_statement__ = 14;
        stan::model::assign(B, ((1 -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) *
          stan::model::rvalue(phi, "phi", stan::model::index_uni(i))),
          "assigning variable B", stan::model::index_uni(i));
      }
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "A", A, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "B", B, 0);
      if (emit_transformed_parameters__) {
        out__.write(mu);
        out__.write(A);
        out__.write(B);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> u =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(u,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n),
        "assigning variable u");
      out__.write(u);
      Eigen::Matrix<local_scalar_t__,-1,1> f =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(f,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(m),
        "assigning variable f");
      out__.write(f);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nvar, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(b,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nvar),
        "assigning variable b");
      out__.write(b);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(phi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n),
        "assigning variable phi");
      out__.write_free_lb(0, phi);
      local_scalar_t__ phi_a = DUMMY_VAR__;
      current_statement__ = 5;
      phi_a = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, phi_a);
      local_scalar_t__ phi_b = DUMMY_VAR__;
      current_statement__ = 6;
      phi_b = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, phi_b);
      local_scalar_t__ sigma2_u = DUMMY_VAR__;
      current_statement__ = 7;
      sigma2_u = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma2_u);
      local_scalar_t__ sigma2_v = DUMMY_VAR__;
      current_statement__ = 8;
      sigma2_v = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma2_v);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "u", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "f", "double",
        std::vector<size_t>{static_cast<size_t>(m)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "b", "double",
        std::vector<size_t>{static_cast<size_t>(nvar)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "phi_a", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "phi_b", "double",
        std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sigma2_u",
        "double", std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "sigma2_v",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> u =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> u_flat__;
        current_statement__ = 1;
        u_flat__ = context__.vals_r("u");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(u, u_flat__[(pos__ - 1)],
            "assigning variable u", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(u);
      Eigen::Matrix<local_scalar_t__,-1,1> f =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> f_flat__;
        current_statement__ = 2;
        f_flat__ = context__.vals_r("f");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(f, f_flat__[(pos__ - 1)],
            "assigning variable f", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(f);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nvar, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> b_flat__;
        current_statement__ = 3;
        b_flat__ = context__.vals_r("b");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= nvar; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(b, b_flat__[(pos__ - 1)],
            "assigning variable b", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(b);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> phi_flat__;
        current_statement__ = 4;
        phi_flat__ = context__.vals_r("phi");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(phi, phi_flat__[(pos__ - 1)],
            "assigning variable phi", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, phi);
      local_scalar_t__ phi_a = DUMMY_VAR__;
      current_statement__ = 5;
      phi_a = context__.vals_r("phi_a")[(1 - 1)];
      out__.write_free_lb(0, phi_a);
      local_scalar_t__ phi_b = DUMMY_VAR__;
      current_statement__ = 6;
      phi_b = context__.vals_r("phi_b")[(1 - 1)];
      out__.write_free_lb(0, phi_b);
      local_scalar_t__ sigma2_u = DUMMY_VAR__;
      current_statement__ = 7;
      sigma2_u = context__.vals_r("sigma2_u")[(1 - 1)];
      out__.write_free_lb(0, sigma2_u);
      local_scalar_t__ sigma2_v = DUMMY_VAR__;
      current_statement__ = 8;
      sigma2_v = context__.vals_r("sigma2_v")[(1 - 1)];
      out__.write_free_lb(0, sigma2_v);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"u", "f", "b", "phi", "phi_a",
                "phi_b", "sigma2_u", "sigma2_v"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"mu", "A", "B"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(n)},
                std::vector<size_t>{static_cast<size_t>(m)},
                std::vector<size_t>{static_cast<size_t>(nvar)},
                std::vector<size_t>{static_cast<size_t>(n)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      param_names__.emplace_back(std::string() + "u" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
      param_names__.emplace_back(std::string() + "f" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nvar; ++sym1__) {
      param_names__.emplace_back(std::string() + "b" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "phi_a");
    param_names__.emplace_back(std::string() + "phi_b");
    param_names__.emplace_back(std::string() + "sigma2_u");
    param_names__.emplace_back(std::string() + "sigma2_v");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "A" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "B" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      param_names__.emplace_back(std::string() + "u" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
      param_names__.emplace_back(std::string() + "f" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nvar; ++sym1__) {
      param_names__.emplace_back(std::string() + "b" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "phi_a");
    param_names__.emplace_back(std::string() + "phi_b");
    param_names__.emplace_back(std::string() + "sigma2_u");
    param_names__.emplace_back(std::string() + "sigma2_v");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "A" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "B" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"u\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(m) + "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nvar) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"phi_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2_u\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2_v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"B\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"u\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(m) + "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nvar) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"phi_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2_u\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2_v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"B\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((n + m) + nvar) + n) + 1) + 1) + 1) +
      1);
    const size_t num_transformed = emit_transformed_parameters * (((n + n) +
      n));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((n + m) + nvar) + n) + 1) + 1) + 1) +
      1);
    const size_t num_transformed = emit_transformed_parameters * (((n + n) +
      n));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_saeHB_TF_beta_namespace::model_saeHB_TF_beta;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_saeHB_TF_beta_namespace::profiles__;
}
#endif
#endif
